// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model.Configurations;

#nullable disable

namespace Model.Migrations
{
    [DbContext(typeof(UserServiceDbContext))]
    partial class UserServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Model.Entities.Addresses.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ADDRESS_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("HOUSE_NUMBER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("LOCATION");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("STATE_ID");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("STREET");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int")
                        .HasColumnName("ZIP_CODE");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("ADDRESSES");
                });

            modelBuilder.Entity("Model.Entities.Addresses.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COUNTRY_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.ToTable("COUNTRIES");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Österreich"
                        });
                });

            modelBuilder.Entity("Model.Entities.Addresses.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("STATE_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("COUNTRY_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("NAME");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("STATES");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Niederösterreich"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "Wien"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "Burgenland"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Name = "Oberösterreich"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Name = "Steiermark"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Name = "Kärnten"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Name = "Salzburg"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Name = "Tirol"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            Name = "Vorarlberg"
                        });
                });

            modelBuilder.Entity("Model.Entities.Applications.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("APPLICATION_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("APPLICATION_KEY");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("APPLICATION_NAME");

                    b.Property<int>("Port")
                        .HasColumnType("int")
                        .HasColumnName("PORT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("APPLICATION_URL");

                    b.HasKey("Id");

                    b.ToTable("APPLICATIONS");
                });

            modelBuilder.Entity("Model.Entities.Auth.LoginAttempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ATTEMPT_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("APPLICATION_ID");

                    b.Property<string>("AttemptStatus")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ATTEMPT_STATUS");

                    b.Property<DateTime>("AttemptedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ATTEMPTED_DATE");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("IP_ADDRESS");

                    b.Property<int>("RegisteredUserId")
                        .HasColumnType("int")
                        .HasColumnName("REGISTERED_USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RegisteredUserId");

                    b.ToTable("LOGIN_ATTEMPTS");
                });

            modelBuilder.Entity("Model.Entities.Auth.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SESSION_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("SESSION_TOKEN");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("VALID_UNTIL");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SESSIONS");
                });

            modelBuilder.Entity("Model.Entities.Roles.ApplicationRole", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("APPLICATION_ID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("ROLE_ID");

                    b.HasKey("ApplicationId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("APPLICATIONS_HAS_ROLES_JT");
                });

            modelBuilder.Entity("Model.Entities.Roles.RegisteredUserRole", b =>
                {
                    b.Property<int>("RegisteredUserId")
                        .HasColumnType("int")
                        .HasColumnName("REGISTERED_USER_ID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("ROLE_ID");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("APPLICATION_ID");

                    b.HasKey("RegisteredUserId", "RoleId", "ApplicationId");

                    b.HasIndex("ApplicationId", "RoleId");

                    b.ToTable("ROLES_has_REGISTERED_USERS");
                });

            modelBuilder.Entity("Model.Entities.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ROLE_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ROLE_NAME");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ROLES");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Patient"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Assistant"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Taxconsultant"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("Model.Entities.Users.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GENDER_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("GENDER_NAME");

                    b.HasKey("Id");

                    b.ToTable("GENDERS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenderName = "Männlich"
                        },
                        new
                        {
                            Id = 2,
                            GenderName = "Weiblich"
                        });
                });

            modelBuilder.Entity("Model.Entities.Users.LoginUserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CREATED_AT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("LAST_NAME");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("LOGIN_USER_DATA");
                });

            modelBuilder.Entity("Model.Entities.Users.RegisteredUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("REGISTERED_USER_ID");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IS_LOCKED");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("PASSWORD_HASH");

                    b.HasKey("Id");

                    b.ToTable("REGISTERED_USERS");
                });

            modelBuilder.Entity("Model.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("ADDRESS_ID");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("BIRTH_DATE");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("longtext")
                        .HasColumnName("BIRTH_PLACE");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GENDER_ID");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("NOTES");

                    b.Property<string>("PrecedingTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("PRECEDING_TITLE");

                    b.Property<string>("Salutation")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("SALUTATION");

                    b.Property<string>("SubsequentTitle")
                        .HasColumnType("longtext")
                        .HasColumnName("SUBSEQUENT_TITLE");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("TELEPHONE");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("GenderId");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("Model.Entities.Addresses.Address", b =>
                {
                    b.HasOne("Model.Entities.Addresses.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Model.Entities.Addresses.State", b =>
                {
                    b.HasOne("Model.Entities.Addresses.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Model.Entities.Auth.LoginAttempt", b =>
                {
                    b.HasOne("Model.Entities.Applications.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Users.RegisteredUser", "RegisteredUser")
                        .WithMany()
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("Model.Entities.Auth.Session", b =>
                {
                    b.HasOne("Model.Entities.Users.RegisteredUser", "RegisteredUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("Model.Entities.Roles.ApplicationRole", b =>
                {
                    b.HasOne("Model.Entities.Applications.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Model.Entities.Roles.RegisteredUserRole", b =>
                {
                    b.HasOne("Model.Entities.Users.RegisteredUser", "RegisteredUser")
                        .WithMany("RegisteredUserRoles")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Roles.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("ApplicationId", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("Model.Entities.Users.RegisteredUser", b =>
                {
                    b.HasOne("Model.Entities.Users.LoginUserData", "LoginUser")
                        .WithOne()
                        .HasForeignKey("Model.Entities.Users.RegisteredUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoginUser");
                });

            modelBuilder.Entity("Model.Entities.Users.User", b =>
                {
                    b.HasOne("Model.Entities.Addresses.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Users.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Users.RegisteredUser", "RegisteredUser")
                        .WithOne()
                        .HasForeignKey("Model.Entities.Users.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Gender");

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("Model.Entities.Users.RegisteredUser", b =>
                {
                    b.Navigation("RegisteredUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
